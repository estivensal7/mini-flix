{"version":3,"sources":["serviceWorker.js","utils/AuthService.js","components/Nav/Nav.js","components/Upload/Upload.js","components/Display/Display.js","components/Callback/Callback.js","index.js"],"names":["Boolean","window","location","hostname","match","ID_TOKEN_KEY","ACCESS_TOKEN_KEY","REDIRECT","SCOPE","AUDIENCE","auth","auth0","WebAuth","clientID","domain","logout","localStorage","removeItem","browserHistory","push","requireAuth","nextState","replace","isLoggedIn","pathname","getParameterByName","name","RegExp","exec","hash","decodeURIComponent","idToken","getItem","encodedToken","token","decode","exp","date","Date","setUTCSeconds","getTokenExpirationDate","Nav","react_default","a","createElement","className","es","to","onClick","authorize","responseType","redirectUri","audience","scope","Component","Upload","uploadWidget","cloudinary","openUploadWidget","cloud_name","upload_preset","tags","sources","error","result","console","log","components_Nav_Nav","this","Display","state","videos","_this2","axios","get","then","res","data","resources","setState","getVideos","cloudinary_react_lib","cloudName","map","index","key","publicId","public_id","width","height","controls","created_at","dist","url","concat","Callback","accessToken","setItem","setAccessToken","setIdToken","href","ReactDOM","render","history","path","component","onEnter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.405b13c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import decode from \"jwt-decode\";\nimport { browserHistory } from \"react-router\";\nimport auth0 from \"auth0-js\";\nconst ID_TOKEN_KEY = \"id_token\";\nconst ACCESS_TOKEN_KEY = \"access_token\";\n\nconst CLIENT_ID = \"EeobY3jxsMoFREmqfmsZwAALQb73WeWm\";\nconst CLIENT_DOMAIN = \"unicoder.auth0.com\";\nconst REDIRECT = \"http://localhost:3000/callback\";\nconst SCOPE = \"full:access\";\nconst AUDIENCE = \"http://miniflix.com\";\n\nvar auth = new auth0.WebAuth({\n\tclientID: CLIENT_ID,\n\tdomain: CLIENT_DOMAIN\n});\n\nexport function login() {\n\tauth.authorize({\n\t\tresponseType: \"token id_token\",\n\t\tredirectUri: REDIRECT,\n\t\taudience: AUDIENCE,\n\t\tscope: SCOPE\n\t});\n}\n\nexport function logout() {\n\tclearIdToken();\n\tclearAccessToken();\n\tbrowserHistory.push(\"/\");\n}\n\nexport function requireAuth(nextState, replace) {\n\tif (!isLoggedIn()) {\n\t\treplace({ pathname: \"/\" });\n\t}\n}\n\nexport function getIdToken() {\n\treturn localStorage.getItem(ID_TOKEN_KEY);\n}\n\nexport function getAccessToken() {\n\treturn localStorage.getItem(ACCESS_TOKEN_KEY);\n}\n\nfunction clearIdToken() {\n\tlocalStorage.removeItem(ID_TOKEN_KEY);\n}\n\nfunction clearAccessToken() {\n\tlocalStorage.removeItem(ACCESS_TOKEN_KEY);\n}\n\n// Helper function that will allow us to extract the access_token and id_token\nfunction getParameterByName(name) {\n\tlet match = RegExp(\"[#&]\" + name + \"=([^&]*)\").exec(\n\t\twindow.location.hash\n\t);\n\treturn match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\n}\n\n// Get and store access_token in local storage\nexport function setAccessToken() {\n\tlet accessToken = getParameterByName(\"access_token\");\n\tlocalStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n}\n\n// Get and store id_token in local storage\nexport function setIdToken() {\n\tlet idToken = getParameterByName(\"id_token\");\n\tlocalStorage.setItem(ID_TOKEN_KEY, idToken);\n}\n\nexport function isLoggedIn() {\n\tconst idToken = getIdToken();\n\treturn !!idToken && !isTokenExpired(idToken);\n}\n\nfunction getTokenExpirationDate(encodedToken) {\n\tconst token = decode(encodedToken);\n\tif (!token.exp) {\n\t\treturn null;\n\t}\n\n\tconst date = new Date(0);\n\tdate.setUTCSeconds(token.exp);\n\n\treturn date;\n}\n\nfunction isTokenExpired(token) {\n\tconst expirationDate = getTokenExpirationDate(token);\n\treturn expirationDate < new Date();\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router\";\nimport { login, logout, isLoggedIn } from \"../../utils/AuthService\";\nimport \"../../App.css\";\n\nclass Nav extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar fixed-top navbar-light bg-dark\">\n\t\t\t\t<div className=\"navbar-header\">\n\t\t\t\t\t<Link\n\t\t\t\t\t\tclassName=\"navbar-brand text-white\"\n\t\t\t\t\t\tto=\"/\"\n\t\t\t\t\t>\n\t\t\t\t\t\tMiniflix\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<ul className=\"nav navbar-nav\">\n\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto=\"/\"\n\t\t\t\t\t\t\tclassName=\"text-white\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAll Videos\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t{isLoggedIn() ? (\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/upload\"\n\t\t\t\t\t\t\t\tclassName=\"text-white\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tUpload Videos\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<ul className=\"nav navbar-nav navbar-right mr-sm-2\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t{isLoggedIn() ? (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-danger log\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tlogout()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLog out{\" \"}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-info log\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tlogin()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLog In\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav/Nav\";\n\nclass Upload extends Component {\n\tuploadWidget = () => {\n\t\twindow.cloudinary.openUploadWidget(\n\t\t\t{\n\t\t\t\tcloud_name: \"dnnsgy24u\",\n\t\t\t\tupload_preset: \"zra6l1tw\",\n\t\t\t\ttags: [\"miniflix\"],\n\t\t\t\tsources: [\n\t\t\t\t\t\"local\",\n\t\t\t\t\t\"url\",\n\t\t\t\t\t\"google_photos\",\n\t\t\t\t\t\"facebook\",\n\t\t\t\t\t\"image_search\"\n\t\t\t\t]\n\t\t\t},\n\t\t\tfunction(error, result) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"This is the result of the last upload\",\n\t\t\t\t\tresult\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Nav />\n\t\t\t\t<h3 className=\"text-center\">\n\t\t\t\t\tUpload your 20-second Video in a jiffy\n\t\t\t\t</h3>\n\t\t\t\t<hr />\n\n\t\t\t\t<div className=\"col-sm-12\">\n\t\t\t\t\t<div className=\"jumbotron text-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-lg btn-info\"\n\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t.uploadWidget\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUpload Video\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Upload;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav/Nav\";\nimport { CloudinaryContext, Video } from \"cloudinary-react\";\nimport axios from \"axios\";\nimport { Share } from \"react-twitter-widgets\";\n\nclass Display extends Component {\n\tstate = {\n\t\tvideos: []\n\t};\n\n\tgetVideos() {\n\t\taxios.get(\n\t\t\t\"http://res.cloudinary.com/dnnsgy24u/video/list/miniflix.json\"\n\t\t).then(res => {\n\t\t\tconsole.log(res.data.resources);\n\t\t\tthis.setState({ videos: res.data.resources });\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getVideos();\n\t}\n\n\trender() {\n\t\tconst { videos } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Nav />\n\t\t\t\t<h3 className=\"text-center\">\n\t\t\t\t\t{\" \"}\n\t\t\t\t\tLatest Videos on MiniFlix{\" \"}\n\t\t\t\t</h3>\n\t\t\t\t<hr />\n\n\t\t\t\t<div className=\"col-sm-6 mx-auto\">\n\t\t\t\t\t<CloudinaryContext cloudName=\"dnnsgy24u\">\n\t\t\t\t\t\t{videos.map((data, index) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"col-sm-12\"\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className=\"embed-responsive embed-responsive-4by3\">\n\t\t\t\t\t\t\t\t\t<Video\n\t\t\t\t\t\t\t\t\t\tpublicId={\n\t\t\t\t\t\t\t\t\t\t\tdata.public_id\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\twidth=\"300\"\n\t\t\t\t\t\t\t\t\t\theight=\"300\"\n\t\t\t\t\t\t\t\t\t\tcontrols\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\tCreated\n\t\t\t\t\t\t\t\t\tat{\" \"}\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdata.created_at\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<Share\n\t\t\t\t\t\t\t\t\turl={`http://res.cloudinary.com/unicodeveloper/video/upload/${\n\t\t\t\t\t\t\t\t\t\tdata.public_id\n\t\t\t\t\t\t\t\t\t}.mp4`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CloudinaryContext>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Display;\n","import { Component } from \"react\";\nimport { setIdToken, setAccessToken } from \"../../utils/AuthService\";\n\nclass Callback extends Component {\n\tcomponentDidMount() {\n\t\tsetAccessToken();\n\t\tsetIdToken();\n\t\twindow.location.href = \"/\";\n\t}\n\n\trender() {\n\t\treturn null;\n\t}\n}\n\nexport default Callback;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router, Route, browserHistory } from \"react-router\";\nimport Upload from \"./components/Upload/Upload\";\nimport Display from \"./components/Display/Display\";\nimport Callback from \"./components/Callback/Callback\";\nimport { requireAuth } from \"./utils/AuthService\";\nimport \"./App.css\";\n\nconst Root = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router history={browserHistory}>\n\t\t\t\t<Route path=\"/\" component={Display} />\n\t\t\t\t<Route\n\t\t\t\t\tpath=\"/upload\"\n\t\t\t\t\tcomponent={Upload}\n\t\t\t\t\tonEnter={requireAuth}\n\t\t\t\t/>\n\t\t\t\t<Route path=\"/callback\" component={Callback} />\n\t\t\t</Router>\n\t\t</div>\n\t);\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}